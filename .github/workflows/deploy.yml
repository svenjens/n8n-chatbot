name: 🚀 Deploy to Netlify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  # Test and Build Job
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: |
          npm ci
          
      - name: 🧪 Run tests
        run: npm run test

      - name: 🔍 Run linting
        run: npm run lint

      - name: 🏗️ Build project
        run: npm run build
        
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🔧 Install Netlify CLI
        run: npm install -g netlify-cli@latest

      - name: 🚀 Deploy to Production
        id: deploy_prod
        run: |
          # Retry logic for deployment
          for i in {1..3}; do
            echo "🚀 Deploy attempt $i/3..."
            
            if DEPLOY_OUTPUT=$(netlify deploy \
              --prod \
              --dir=dist \
              --functions=netlify/functions \
              --site=${{ env.NETLIFY_SITE_ID }} \
              --auth=${{ env.NETLIFY_AUTH_TOKEN }} \
              --timeout=300000 \
              --message="🚀 Production deploy from GitHub Actions (attempt $i)" \
              --json); then
              
              echo "✅ Deploy successful on attempt $i"
              echo "deploy_output=$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
              
              DEPLOY_URL=$(echo $DEPLOY_OUTPUT | jq -r '.url // empty')
              echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
              
              exit 0
            else
              echo "❌ Deploy failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "💥 All deploy attempts failed"
                exit 1
              fi
              echo "⏳ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 📊 Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const siteUrl = `https://${process.env.NETLIFY_SITE_ID}.netlify.app`;
            const comment = `🚀 **Production Deploy Successful!**\n\n✅ Live at: ${siteUrl}`;
            
            // Only comment on commits that have associated PRs
            try {
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
              });
              
              if (prs.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prs[0].number,
                  body: comment
                });
              }
            } catch (error) {
              console.log('No PR found or unable to comment:', error.message);
            }

  # Deploy Preview for Develop branch and PRs
  deploy-preview:
    name: 🔍 Deploy Preview
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.ref == 'refs/heads/develop' && github.event_name == 'push') || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🔧 Install Netlify CLI
        run: npm install -g netlify-cli@latest

      - name: 🔍 Deploy Preview
        id: deploy
        run: |
          # Retry logic for preview deployment
          for i in {1..3}; do
            echo "🔍 Preview deploy attempt $i/3..."
            
            if DEPLOY_OUTPUT=$(netlify deploy \
              --dir=dist \
              --functions=netlify/functions \
              --site=${{ env.NETLIFY_SITE_ID }} \
              --auth=${{ env.NETLIFY_AUTH_TOKEN }} \
              --timeout=300000 \
              --message="🔍 Preview deploy from GitHub Actions (attempt $i)" \
              --json); then
              
              echo "✅ Preview deploy successful on attempt $i"
              echo "deploy_output=$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
              
              DEPLOY_URL=$(echo $DEPLOY_OUTPUT | jq -r '.deploy_url // empty')
              echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
              
              exit 0
            else
              echo "❌ Preview deploy failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "💥 All preview deploy attempts failed"
                exit 1
              fi
              echo "⏳ Waiting 20 seconds before retry..."
              sleep 20
            fi
          done
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: 📊 Comment Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = '${{ steps.deploy.outputs.deploy_url }}';
            if (!deployUrl) {
              console.log('No deploy URL found');
              return;
            }
            
            const comment = `🔍 **Preview Deploy Ready!**\n\n✅ Preview: ${deployUrl}\n\n---\n*This preview will be available until the PR is merged or closed.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level high

  # Performance Audit (Production only)
  lighthouse:
    name: 📈 Lighthouse Performance
    needs: deploy-production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 📈 Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}